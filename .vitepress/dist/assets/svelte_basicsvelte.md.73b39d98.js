import{_ as a,C as n,o as l,c as o,H as p,w as e,Q as t,k as c}from"./chunks/framework.a2ff2cdc.js";const b=JSON.parse('{"title":"Svelte Concepts","description":"","frontmatter":{},"headers":[],"relativePath":"svelte/basicsvelte.md","filePath":"svelte/basicsvelte.md"}'),r={name:"svelte/basicsvelte.md"},E=c("img",{src:"https://i.imgur.com/tLjkD58.png"},null,-1),i=t(`<h1 id="svelte-concepts" tabindex="-1">Svelte Concepts <a class="header-anchor" href="#svelte-concepts" aria-label="Permalink to &quot;Svelte Concepts&quot;">​</a></h1><h2 id="declarations" tabindex="-1">Declarations <a class="header-anchor" href="#declarations" aria-label="Permalink to &quot;Declarations&quot;">​</a></h2><p><strong>Definition</strong>: <code>An element that changes in response to a SEPERATE variable changing</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">: doubled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// doubled will change when count changes.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;">: doubled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// doubled will change when count changes.</span></span></code></pre></div><h2 id="component-props" tabindex="-1">Component Props <a class="header-anchor" href="#component-props" aria-label="Permalink to &quot;Component Props&quot;">​</a></h2><p><strong>Nested.svelte</strong>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> myProp;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myProp;</span></span></code></pre></div><p><strong>App.svelte</strong>:</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Nested</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">myProp</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">} /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Nested</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myProp</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">} /&gt;</span></span></code></pre></div><h3 id="spread-props" tabindex="-1">Spread Props <a class="header-anchor" href="#spread-props" aria-label="Permalink to &quot;Spread Props&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Nested</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{pkg.name} </span><span style="color:#B392F0;">speed</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{pkg.speed} /&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// Can be written as</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Nested</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">pkg} /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Nested</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{pkg.name} </span><span style="color:#6F42C1;">speed</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{pkg.speed} /&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// Can be written as</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Nested</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">pkg} /&gt;</span></span></code></pre></div><h2 id="if-else-blocks" tabindex="-1">If/Else Blocks <a class="header-anchor" href="#if-else-blocks" aria-label="Permalink to &quot;If/Else Blocks&quot;">​</a></h2><p><strong>Start</strong>: <code>#</code><strong>Middle</strong>: <code>:</code><strong>End</strong>: <code>/</code></p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{#</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;11+&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{:</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">} </span><span style="color:#6A737D;">// also (:else if)</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Else&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">/if</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{#</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;11+&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{:</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">} </span><span style="color:#6A737D;">// also (:else if)</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Else&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">/if</span><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="each-blocks" tabindex="-1">Each Blocks <a class="header-anchor" href="#each-blocks" aria-label="Permalink to &quot;Each Blocks&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{#each colors </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">color</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">each}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GET The Index</span></span>
<span class="line"><span style="color:#E1E4E8;">{#each colors </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">color</span><span style="color:#E1E4E8;">, i}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">each}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// DEFINE The Key</span></span>
<span class="line"><span style="color:#E1E4E8;">{#each colors </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">color</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">color</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">someId</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">each}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{#each colors </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">color</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">each}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GET The Index</span></span>
<span class="line"><span style="color:#24292E;">{#each colors </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">color</span><span style="color:#24292E;">, i}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">each}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// DEFINE The Key</span></span>
<span class="line"><span style="color:#24292E;">{#each colors </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">color</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">color</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">someId</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">each}</span></span></code></pre></div><h3 id="await-blocks" tabindex="-1">Await Blocks <a class="header-anchor" href="#await-blocks" aria-label="Permalink to &quot;Await Blocks&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{#</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> promise}</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;...Waiting&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{:then number}</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;The Number is {number}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{:</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> error}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">/await</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Can also write</span></span>
<span class="line"><span style="color:#E1E4E8;">{#</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> promise then number}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">/await</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{#</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> promise}</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;...Waiting&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{:then number}</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;The Number is {number}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{:</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> error}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">/await</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Can also write</span></span>
<span class="line"><span style="color:#24292E;">{#</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> promise then number}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">/await</span><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="events-event-modifiers" tabindex="-1">Events &amp; Event Modifiers <a class="header-anchor" href="#events-event-modifiers" aria-label="Permalink to &quot;Events &amp; Event Modifiers&quot;">​</a></h2><h3 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h3><p><code>on:event</code></p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">click</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Clicked&quot;</span><span style="color:#E1E4E8;">)}&gt;...&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">click</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Clicked&quot;</span><span style="color:#24292E;">)}&gt;...&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="event-modifiers" tabindex="-1">Event Modifiers <a class="header-anchor" href="#event-modifiers" aria-label="Permalink to &quot;Event Modifiers&quot;">​</a></h3><p><code>on:click|once|self...</code></p><ul><li><code>preventDefault</code> — calls <code>event.preventDefault()</code> before running the handler. Useful for client-side form handling, for example.</li><li><code>stopPropagation</code> — calls <code>event.stopPropagation()</code>, preventing the event reaching the next element</li><li><code>passive</code> — improves scrolling performance on touch/wheel events (Svelte will add it automatically where it&#39;s safe to do so)</li><li><code>nonpassive</code> — explicitly set <code>passive: false</code></li><li><code>capture</code> — fires the handler during the <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_capture" target="_blank" rel="noreferrer"><em>capture</em></a> phase instead of the <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling" target="_blank" rel="noreferrer"><em>bubbling</em></a> phase</li><li><code>once</code> — remove the handler after the first time it runs</li><li><code>self</code> — only trigger handler if event.target is the element itself</li><li><code>trusted</code> — only trigger handler if <code>event.isTrusted</code> is <code>true</code>, meaning the event was triggered by a user action rather than because some JavaScript called <code>element.dispatchEvent(...)</code></li></ul><p>You can chain modifiers together, e.g. <code>on:click|once|capture={...}</code>.</p><h2 id="component-events" tabindex="-1">Component Events <a class="header-anchor" href="#component-events" aria-label="Permalink to &quot;Component Events&quot;">​</a></h2><p><code>createEventDispatcher()</code><code>dispatch(&quot;eventName&quot;, &quot;message / payload&quot;)</code></p><blockquote><p><code>createEventDispatcher</code> must be called when the component is first instantiated — you can&#39;t do it later inside e.g. a <code>setTimeout</code> callback. This links <code>dispatch</code> to the component instance.</p></blockquote><p><strong>Component.svelte</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createEventDispatcher, </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> EventDispatcher } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;svelte&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dispatch</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventDispatcher</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createEventDispatcher</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Wassup World!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">on:click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{sayHello}&quot;</span><span style="color:#E1E4E8;">&gt;Say Hello&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createEventDispatcher, </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> EventDispatcher } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;svelte&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dispatch</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EventDispatcher</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createEventDispatcher</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Wassup World!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on:click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{sayHello}&quot;</span><span style="color:#24292E;">&gt;Say Hello&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><strong>App.svelte</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">Component</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">on:message</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">{(msg)</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">=</span><span style="color:#E1E4E8;">&gt; console.log(msg)} /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">Component</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on:message</span><span style="color:#24292E;">=</span><span style="color:#032F62;">{(msg)</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">=</span><span style="color:#24292E;">&gt; console.log(msg)} /&gt;</span></span></code></pre></div><h3 id="event-forwarding" tabindex="-1">Event Forwarding <a class="header-anchor" href="#event-forwarding" aria-label="Permalink to &quot;Event Forwarding&quot;">​</a></h3><p>If you want to listen to an event on some deeply nested component, the intermediate components must <em>forward</em> the event.</p><p><code>on:message</code> event directive without a value means &#39;forward all <code>message</code> events&#39;.</p><p><code>&lt;Component on:message /&gt;</code></p><h2 id="bindings" tabindex="-1">Bindings <a class="header-anchor" href="#bindings" aria-label="Permalink to &quot;Bindings&quot;">​</a></h2><h3 id="text-inputs" tabindex="-1">Text Inputs <a class="header-anchor" href="#text-inputs" aria-label="Permalink to &quot;Text Inputs&quot;">​</a></h3><p><code>bind:value={variable}</code></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Josh&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bind:value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{name}&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Josh&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bind:value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{name}&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><blockquote><p>Types are resolved for you by binding, i.e you can make a text input return a numeric value instead of string &quot;4&quot; vs 4</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;number&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">bind:value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{a}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">// Returns a not &quot;a&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;number&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">bind:value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{a}&quot;</span></span>
<span class="line"><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">// Returns a not &quot;a&quot;</span></span></code></pre></div></blockquote><h3 id="checkbox-inputs" tabindex="-1">Checkbox Inputs <a class="header-anchor" href="#checkbox-inputs" aria-label="Permalink to &quot;Checkbox Inputs&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;checkbox&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">bind:checked</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{yes}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;checkbox&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">bind:checked</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{yes}&quot;</span></span>
<span class="line"><span style="color:#24292E;">/&gt;</span></span></code></pre></div><h3 id="group-binding" tabindex="-1">Group Binding <a class="header-anchor" href="#group-binding" aria-label="Permalink to &quot;Group Binding&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;checkbox&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;flavours&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">bind:group</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{flavours}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;checkbox&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;flavours&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">bind:group</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{flavours}&quot;</span></span>
<span class="line"><span style="color:#24292E;">/&gt;</span></span></code></pre></div><h2 id="lifecycle" tabindex="-1">Lifecycle <a class="header-anchor" href="#lifecycle" aria-label="Permalink to &quot;Lifecycle&quot;">​</a></h2><blockquote><p>Every component has a <em>lifecycle</em> that starts when it is created, and ends when it is destroyed. There are a handful of functions that allow you to run code at key moments during that lifecycle. The one you&#39;ll use most frequently is <code>onMount</code>, which runs after the component is first rendered to the DOM.</p></blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { onMount } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;svelte</span><span style="color:#FDAEB7;font-style:italic;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">onMount</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">	});</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { onMount } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;svelte</span><span style="color:#B31D28;font-style:italic;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">onMount</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">	});</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><code>beforeUpdate</code> = Runs BEFORE DOM Updated <code>afterUpdate</code> = Runs AFTER DOM Updated</p><blockquote><p>The <code>beforeUpdate</code> function schedules work to happen immediately before the DOM is updated. <code>afterUpdate</code> is its counterpart, used for running code once the DOM is in sync with your data. Together, they&#39;re useful for doing things imperatively that are difficult to achieve in a purely state-driven way, like updating the scroll position of an element.</p></blockquote><p>The <code>tick</code> function is unlike other lifecycle functions in that you can call it any time, not just when the component first initialises. It returns a promise that resolves as soon as any pending state changes have been applied to the DOM (or immediately, if there are no pending state changes).</p><p>When you update component state in Svelte, it doesn&#39;t update the DOM immediately. Instead, it waits until the next <em>microtask</em> to see if there are any other changes that need to be applied, including in other components. Doing so avoids unnecessary work and allows the browser to batch things more effectively.</p>`,53);function y(d,h,u,g,v,F){const s=n("center");return l(),o("div",null,[p(s,null,{default:e(()=>[E]),_:1}),i])}const k=a(r,[["render",y]]);export{b as __pageData,k as default};
